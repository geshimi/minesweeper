{"version":3,"sources":["types/index.ts","components/NumberDisplay/NumberDisplay.tsx","utils/index.ts","constants/index.ts","components/Button/index.tsx","components/App/index.tsx","index.tsx"],"names":["CellValue","CellState","Face","NumberDisplay","value","className","Math","abs","toString","padStart","grabAllAdjacentCells","cells","rowParam","colParam","topLeftCell","topCell","topRightCell","MAX_COLS","leftCell","rightCell","bottomLeftCell","MAX_ROWS","bottomCell","bottomRightCell","generateCells","row","push","col","None","state","Open","bombPlaced","randomRow","floor","random","randomCol","Bomb","map","rowIndex","cell","colIndex","currentCell","numberOfBombs","openMultipleCells","Visible","Flagged","newCells","slice","Button","isRed","onClick","onContext","onContextMenu","role","aria-label","App","useState","setCells","Smile","face","setFace","time","setTime","live","setLive","bombCounter","setBombCounter","hasLost","setHasLost","hasWon","setHasWon","useEffect","handleMouseDown","Oh","handleMouseUp","window","addEventListener","removeEventListener","timer","setInterval","clearInterval","Lost","Won","handleCellClick","isABomb","includes","showAllBombs","safeOpenCellsExists","handleCellContext","e","preventDefault","currentCells","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd4393be.chunk.js","sourcesContent":["export enum CellValue {\r\n  None,\r\n  One,\r\n  Two,\r\n  Three,\r\n  Four,\r\n  Five,\r\n  Six,\r\n  Seven,\r\n  Eight,\r\n  Bomb,\r\n}\r\n\r\nexport enum CellState {\r\n  Open,\r\n  Visible,\r\n  Flagged,\r\n}\r\n\r\nexport type Cell = {\r\n  value: CellValue;\r\n  state: CellState;\r\n  isRed?: boolean;\r\n};\r\n\r\nexport enum Face {\r\n  Smile = \"ðŸ˜‰\",\r\n  Oh = \"ðŸ˜³\",\r\n  Lost = \"ðŸ˜µ\",\r\n  Won = \"ðŸ˜Ž\",\r\n}\r\n","import React, { FC } from \"react\";\r\nimport \"./NumberDisplay.scss\";\r\n\r\ninterface NumberDisplayProps {\r\n  value: number;\r\n}\r\n\r\nconst NumberDisplay: FC<NumberDisplayProps> = ({ value }) => {\r\n  return (\r\n    <div className=\"NumberDisplay\">\r\n      {value < 0\r\n        ? `-${Math.abs(value).toString().padStart(2, \"0\")}`\r\n        : value.toString().padStart(3, \"0\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NumberDisplay;\r\n","import React, { MouseEvent } from \"react\";\r\nimport { MAX_COLS, MAX_ROWS, NO_OF_BOMBS } from \"./../constants/index\";\r\nimport { Cell, CellValue, CellState } from \"./../types/index\";\r\n\r\nconst grabAllAdjacentCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): {\r\n  topLeftCell: Cell | null;\r\n  topCell: Cell | null;\r\n  topRightCell: Cell | null;\r\n  leftCell: Cell | null;\r\n  rightCell: Cell | null;\r\n  bottomLeftCell: Cell | null;\r\n  bottomCell: Cell | null;\r\n  bottomRightCell: Cell | null;\r\n} => {\r\n  const topLeftCell =\r\n    rowParam > 0 && colParam > 0 ? cells[rowParam - 1][colParam - 1] : null;\r\n  const topCell = rowParam > 0 ? cells[rowParam - 1][colParam] : null;\r\n  const topRightCell =\r\n    rowParam > 0 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam - 1][colParam + 1]\r\n      : null;\r\n  const leftCell = colParam > 0 ? cells[rowParam][colParam - 1] : null;\r\n  const rightCell =\r\n    colParam < MAX_COLS - 1 ? cells[rowParam][colParam + 1] : null;\r\n  const bottomLeftCell =\r\n    rowParam < MAX_ROWS - 1 && colParam > 0\r\n      ? cells[rowParam + 1][colParam - 1]\r\n      : null;\r\n  const bottomCell =\r\n    rowParam < MAX_ROWS - 1 ? cells[rowParam + 1][colParam] : null;\r\n  const bottomRightCell =\r\n    rowParam < MAX_ROWS - 1 && colParam < MAX_COLS - 1\r\n      ? cells[rowParam + 1][colParam + 1]\r\n      : null;\r\n\r\n  return {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  };\r\n};\r\n\r\nexport const generateCells = (): Cell[][] => {\r\n  let cells: Cell[][] = [];\r\n\r\n  for (let row = 0; row < MAX_ROWS; row++) {\r\n    cells.push([]);\r\n    for (let col = 0; col < MAX_COLS; col++) {\r\n      cells[row].push({\r\n        value: CellValue.None,\r\n        state: CellState.Open,\r\n      });\r\n    }\r\n  }\r\n\r\n  let bombPlaced = 0;\r\n  while (bombPlaced < NO_OF_BOMBS) {\r\n    const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n    const randomCol = Math.floor(Math.random() * MAX_COLS);\r\n    const currentCell = cells[randomRow][randomCol];\r\n    if (currentCell.value !== CellValue.Bomb) {\r\n      cells = cells.map((row, rowIndex) =>\r\n        row.map((cell, colIndex) => {\r\n          if (randomRow === rowIndex && randomCol === colIndex) {\r\n            return {\r\n              ...cell,\r\n              value: CellValue.Bomb,\r\n            };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n      bombPlaced++;\r\n    }\r\n  }\r\n\r\n  for (let rowIndex = 0; rowIndex < MAX_ROWS; rowIndex++) {\r\n    for (let colIndex = 0; colIndex < MAX_COLS; colIndex++) {\r\n      const currentCell = cells[rowIndex][colIndex];\r\n      if (currentCell.value === CellValue.Bomb) {\r\n        continue;\r\n      }\r\n      let numberOfBombs = 0;\r\n      const {\r\n        topLeftCell,\r\n        topCell,\r\n        topRightCell,\r\n        leftCell,\r\n        rightCell,\r\n        bottomLeftCell,\r\n        bottomCell,\r\n        bottomRightCell,\r\n      } = grabAllAdjacentCells(cells, rowIndex, colIndex);\r\n\r\n      if (topLeftCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (topCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (topRightCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (leftCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (rightCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomLeftCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n      if (bottomRightCell?.value === CellValue.Bomb) {\r\n        numberOfBombs++;\r\n      }\r\n\r\n      if (numberOfBombs > 0) {\r\n        cells[rowIndex][colIndex] = {\r\n          ...currentCell,\r\n          value: numberOfBombs,\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  return cells;\r\n};\r\n\r\nexport const openMultipleCells = (\r\n  cells: Cell[][],\r\n  rowParam: number,\r\n  colParam: number\r\n): Cell[][] => {\r\n  const currentCell = cells[rowParam][colParam];\r\n\r\n  if (\r\n    currentCell.state === CellState.Visible ||\r\n    currentCell.state === CellState.Flagged\r\n  ) {\r\n    return cells;\r\n  }\r\n\r\n  let newCells = cells.slice();\r\n  newCells[rowParam][colParam].state = CellState.Visible;\r\n\r\n  const {\r\n    topLeftCell,\r\n    topCell,\r\n    topRightCell,\r\n    leftCell,\r\n    rightCell,\r\n    bottomLeftCell,\r\n    bottomCell,\r\n    bottomRightCell,\r\n  } = grabAllAdjacentCells(cells, rowParam, colParam);\r\n\r\n  if (\r\n    topLeftCell?.state === CellState.Open &&\r\n    topLeftCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (topLeftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (topCell?.state === CellState.Open && topCell.value !== CellValue.Bomb) {\r\n    if (topCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam);\r\n    } else {\r\n      newCells[rowParam - 1][colParam].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    topRightCell?.state === CellState.Open &&\r\n    topRightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (topRightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam - 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam - 1][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (leftCell?.state === CellState.Open && leftCell.value !== CellValue.Bomb) {\r\n    if (leftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam - 1);\r\n    } else {\r\n      newCells[rowParam][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    rightCell?.state === CellState.Open &&\r\n    rightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (rightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam + 1);\r\n    } else {\r\n      newCells[rowParam][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomLeftCell?.state === CellState.Open &&\r\n    bottomLeftCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomLeftCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam - 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam - 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomCell?.state === CellState.Open &&\r\n    bottomCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam);\r\n    } else {\r\n      newCells[rowParam + 1][colParam].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  if (\r\n    bottomRightCell?.state === CellState.Open &&\r\n    bottomRightCell.value !== CellValue.Bomb\r\n  ) {\r\n    if (bottomRightCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam + 1, colParam + 1);\r\n    } else {\r\n      newCells[rowParam + 1][colParam + 1].state = CellState.Visible;\r\n    }\r\n  }\r\n\r\n  return newCells;\r\n};\r\n","export const MAX_ROWS = 9;\r\nexport const MAX_COLS = 9;\r\nexport const NO_OF_BOMBS = 10;\r\n","import React, { FC, ReactNode } from \"react\";\r\nimport { CellState, CellValue } from \"../../types/index\";\r\nimport \"./Button.scss\";\r\n\r\ninterface ButtonProps {\r\n  key: string;\r\n  col: number;\r\n  row: number;\r\n  state: CellState;\r\n  value: CellValue;\r\n  isRed?: boolean;\r\n  onClick(rowParam: number, colParam: number): (...args: any[]) => void;\r\n  onContext(rowParam: number, colParam: number): (...args: any[]) => void;\r\n}\r\n\r\nconst Button: FC<ButtonProps> = ({\r\n  isRed,\r\n  col,\r\n  row,\r\n  onClick,\r\n  onContext,\r\n  state,\r\n  value,\r\n}) => {\r\n  const renderContent = (): ReactNode => {\r\n    if (state === CellState.Visible) {\r\n      if (value === CellValue.Bomb) {\r\n        return (\r\n          <span role=\"img\" aria-label=\"Bomb\">\r\n            ðŸ’£\r\n          </span>\r\n        );\r\n      } else if (value === CellValue.None) {\r\n        return null;\r\n      }\r\n      return value;\r\n    } else if (state === CellState.Flagged) {\r\n      return (\r\n        <span role=\"img\" aria-label=\"Flag\">\r\n          ðŸš©\r\n        </span>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Button ${\r\n        state === CellState.Visible ? \"Visible\" : \"\"\r\n      } Value-${value} ${isRed ? \"isRed\" : \"\"}`}\r\n      onClick={onClick(row, col)}\r\n      onContextMenu={onContext(row, col)}\r\n    >\r\n      {renderContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { FC, useState, useEffect } from \"react\";\r\nimport NumberDisplay from \"../NumberDisplay/NumberDisplay\";\r\nimport { generateCells, openMultipleCells } from \"../../utils/index\";\r\nimport { Cell, CellState, CellValue, Face } from \"../../types/index\";\r\nimport Button from \"../Button/index\";\r\nimport \"./index.scss\";\r\nimport { MAX_COLS, MAX_ROWS } from \"../../constants\";\r\n\r\nconst App: FC<{}> = () => {\r\n  const [cells, setCells] = useState<Cell[][]>(generateCells());\r\n  const [face, setFace] = useState<Face>(Face.Smile);\r\n  const [time, setTime] = useState<number>(0);\r\n  const [live, setLive] = useState<boolean>(false);\r\n  const [bombCounter, setBombCounter] = useState<number>(10);\r\n  const [hasLost, setHasLost] = useState<boolean>(false);\r\n  const [hasWon, setHasWon] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const handleMouseDown = (): void => {\r\n      setFace(Face.Oh);\r\n    };\r\n\r\n    const handleMouseUp = (): void => {\r\n      setFace(Face.Smile);\r\n    };\r\n\r\n    window.addEventListener(\"mousedown\", handleMouseDown);\r\n    window.addEventListener(\"mouseup\", handleMouseUp);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"mousedown\", handleMouseDown);\r\n      window.removeEventListener(\"mouseup\", handleMouseUp);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (live && time < 999) {\r\n      const timer = setInterval(() => {\r\n        setTime(time + 1);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [live, time]);\r\n\r\n  useEffect(() => {\r\n    if (hasLost) {\r\n      setLive(false);\r\n      setFace(Face.Lost);\r\n    }\r\n  }, [hasLost]);\r\n\r\n  useEffect(() => {\r\n    if (hasWon) {\r\n      setLive(false);\r\n      setFace(Face.Won);\r\n    }\r\n  }, [hasWon]);\r\n\r\n  const handleCellClick = (rowParam: number, colParam: number) => (): void => {\r\n    let newCells = cells.slice();\r\n\r\n    if (!live) {\r\n      let isABomb = newCells[rowParam][colParam].value === CellValue.Bomb;\r\n      while (isABomb) {\r\n        newCells = generateCells();\r\n        if (newCells[rowParam][colParam].value !== CellValue.Bomb) {\r\n          isABomb = false;\r\n          break;\r\n        }\r\n      }\r\n      setLive(true);\r\n    }\r\n\r\n    const currentCell = newCells[rowParam][colParam];\r\n\r\n    if ([CellState.Flagged, CellState.Visible].includes(currentCell.state)) {\r\n      return;\r\n    }\r\n\r\n    if (currentCell.value === CellValue.Bomb) {\r\n      setHasLost(true);\r\n      newCells[rowParam][colParam].isRed = true;\r\n      newCells = showAllBombs();\r\n      setCells(newCells);\r\n      return;\r\n    } else if (currentCell.value === CellValue.None) {\r\n      newCells = openMultipleCells(newCells, rowParam, colParam);\r\n    } else {\r\n      newCells[rowParam][colParam].state = CellState.Visible;\r\n    }\r\n\r\n    let safeOpenCellsExists = false;\r\n    for (let row = 0; row < MAX_ROWS; row++) {\r\n      for (let col = 0; col < MAX_COLS; col++) {\r\n        const currentCell = newCells[row][col];\r\n\r\n        if (\r\n          currentCell.value !== CellValue.Bomb &&\r\n          currentCell.state === CellState.Open\r\n        ) {\r\n          safeOpenCellsExists = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!safeOpenCellsExists) {\r\n      newCells = newCells.map((row) =>\r\n        row.map((cell) => {\r\n          if (cell.value === CellValue.Bomb) {\r\n            return {\r\n              ...cell,\r\n              state: CellState.Flagged,\r\n            };\r\n          }\r\n          return cell;\r\n        })\r\n      );\r\n      setHasWon(true);\r\n    }\r\n\r\n    setCells(newCells);\r\n  };\r\n\r\n  const handleCellContext = (rowParam: number, colParam: number) => (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>\r\n  ): void => {\r\n    e.preventDefault();\r\n\r\n    if (!live) {\r\n      return;\r\n    }\r\n\r\n    const currentCells = cells.slice();\r\n    const currentCell = cells[rowParam][colParam];\r\n\r\n    if (currentCell.state === CellState.Visible) {\r\n      return;\r\n    } else if (currentCell.state === CellState.Open) {\r\n      currentCells[rowParam][colParam].state = CellState.Flagged;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter - 1);\r\n    } else if (currentCell.state === CellState.Flagged) {\r\n      currentCells[rowParam][colParam].state = CellState.Open;\r\n      setCells(currentCells);\r\n      setBombCounter(bombCounter + 1);\r\n    }\r\n  };\r\n\r\n  const handleFaceClick = (): void => {\r\n    setLive(false);\r\n    setTime(0);\r\n    setCells(generateCells());\r\n    setHasLost(false);\r\n    setHasWon(false);\r\n  };\r\n\r\n  const renderCells = (): React.ReactNode => {\r\n    return cells.map((row, rowIndex) =>\r\n      row.map((cell, colIndex) => (\r\n        <Button\r\n          col={colIndex}\r\n          key={`${rowIndex}-${colIndex}`}\r\n          onClick={handleCellClick}\r\n          onContext={handleCellContext}\r\n          isRed={cell.isRed}\r\n          row={rowIndex}\r\n          state={cell.state}\r\n          value={cell.value}\r\n        />\r\n      ))\r\n    );\r\n  };\r\n\r\n  const showAllBombs = (): Cell[][] => {\r\n    const currentCells = cells.slice();\r\n    return currentCells.map((row) =>\r\n      row.map((cell) => {\r\n        if (cell.value === CellValue.Bomb) {\r\n          return {\r\n            ...cell,\r\n            state: CellState.Visible,\r\n          };\r\n        }\r\n\r\n        return cell;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\">\r\n        <NumberDisplay value={bombCounter} />\r\n        <div className=\"face\" onClick={handleFaceClick}>\r\n          <span role=\"img\" aria-label=\"Face\">\r\n            {face}\r\n          </span>\r\n        </div>\r\n        <NumberDisplay value={time} />\r\n      </div>\r\n      <div className=\"body\">{renderCells()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/index\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}